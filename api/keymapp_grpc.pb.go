// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/keymapp.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyboardService_GetStatus_FullMethodName          = "/api.KeyboardService/GetStatus"
	KeyboardService_GetKeyboards_FullMethodName       = "/api.KeyboardService/GetKeyboards"
	KeyboardService_ConnectKeyboard_FullMethodName    = "/api.KeyboardService/ConnectKeyboard"
	KeyboardService_ConnectAnyKeyboard_FullMethodName = "/api.KeyboardService/ConnectAnyKeyboard"
	KeyboardService_DisconnectKeyboard_FullMethodName = "/api.KeyboardService/DisconnectKeyboard"
	KeyboardService_SetLayer_FullMethodName           = "/api.KeyboardService/SetLayer"
	KeyboardService_UnsetLayer_FullMethodName         = "/api.KeyboardService/UnsetLayer"
	KeyboardService_SetRGBLed_FullMethodName          = "/api.KeyboardService/SetRGBLed"
	KeyboardService_SetRGBAll_FullMethodName          = "/api.KeyboardService/SetRGBAll"
	KeyboardService_SetStatusLed_FullMethodName       = "/api.KeyboardService/SetStatusLed"
	KeyboardService_IncreaseBrightness_FullMethodName = "/api.KeyboardService/IncreaseBrightness"
	KeyboardService_DecreaseBrightness_FullMethodName = "/api.KeyboardService/DecreaseBrightness"
)

// KeyboardServiceClient is the client API for KeyboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyboardServiceClient interface {
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusReply, error)
	// Returns a list of all detected keyboards.
	GetKeyboards(ctx context.Context, in *GetKeyboardsRequest, opts ...grpc.CallOption) (*GetKeyboardsReply, error)
	// Connects to a keyboard using given an id retrieved from GetKeyboards.
	ConnectKeyboard(ctx context.Context, in *ConnectKeyboardRequest, opts ...grpc.CallOption) (*ConnectKeyboardReply, error)
	// Connects to the first available keyboard.
	ConnectAnyKeyboard(ctx context.Context, in *ConnectAnyKeyboardRequest, opts ...grpc.CallOption) (*ConnectKeyboardReply, error)
	// Disconnects to a keyboard using given an id retrieved from GetKeyboards.
	DisconnectKeyboard(ctx context.Context, in *DisconnectKeyboardRequest, opts ...grpc.CallOption) (*DisconnectKeyboardReply, error)
	// Sets the active layer of a connected keyboard.
	SetLayer(ctx context.Context, in *SetLayerRequest, opts ...grpc.CallOption) (*SetLayerReply, error)
	// Unsets a previously set layer.
	UnsetLayer(ctx context.Context, in *SetLayerRequest, opts ...grpc.CallOption) (*SetLayerReply, error)
	// Sets the color of a specific LED on the keyboard.
	SetRGBLed(ctx context.Context, in *SetRGBLedRequest, opts ...grpc.CallOption) (*SetRGBLedReply, error)
	// Sets the color of all LEDs on the keyboard.
	SetRGBAll(ctx context.Context, in *SetRGBAllRequest, opts ...grpc.CallOption) (*SetRGBAllReply, error)
	// Sets the status LED on the keyboard.
	SetStatusLed(ctx context.Context, in *SetStatusLedRequest, opts ...grpc.CallOption) (*SetStatusLedReply, error)
	// Increases the brightness of the keyboard.
	IncreaseBrightness(ctx context.Context, in *IncreaseBrightnessRequest, opts ...grpc.CallOption) (*BrightnessUpdateReply, error)
	// Decreases the brightness of the keyboard.
	DecreaseBrightness(ctx context.Context, in *DecreaseBrightnessRequest, opts ...grpc.CallOption) (*BrightnessUpdateReply, error)
}

type keyboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyboardServiceClient(cc grpc.ClientConnInterface) KeyboardServiceClient {
	return &keyboardServiceClient{cc}
}

func (c *keyboardServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusReply)
	err := c.cc.Invoke(ctx, KeyboardService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) GetKeyboards(ctx context.Context, in *GetKeyboardsRequest, opts ...grpc.CallOption) (*GetKeyboardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeyboardsReply)
	err := c.cc.Invoke(ctx, KeyboardService_GetKeyboards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) ConnectKeyboard(ctx context.Context, in *ConnectKeyboardRequest, opts ...grpc.CallOption) (*ConnectKeyboardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectKeyboardReply)
	err := c.cc.Invoke(ctx, KeyboardService_ConnectKeyboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) ConnectAnyKeyboard(ctx context.Context, in *ConnectAnyKeyboardRequest, opts ...grpc.CallOption) (*ConnectKeyboardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectKeyboardReply)
	err := c.cc.Invoke(ctx, KeyboardService_ConnectAnyKeyboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) DisconnectKeyboard(ctx context.Context, in *DisconnectKeyboardRequest, opts ...grpc.CallOption) (*DisconnectKeyboardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectKeyboardReply)
	err := c.cc.Invoke(ctx, KeyboardService_DisconnectKeyboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) SetLayer(ctx context.Context, in *SetLayerRequest, opts ...grpc.CallOption) (*SetLayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLayerReply)
	err := c.cc.Invoke(ctx, KeyboardService_SetLayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) UnsetLayer(ctx context.Context, in *SetLayerRequest, opts ...grpc.CallOption) (*SetLayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLayerReply)
	err := c.cc.Invoke(ctx, KeyboardService_UnsetLayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) SetRGBLed(ctx context.Context, in *SetRGBLedRequest, opts ...grpc.CallOption) (*SetRGBLedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRGBLedReply)
	err := c.cc.Invoke(ctx, KeyboardService_SetRGBLed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) SetRGBAll(ctx context.Context, in *SetRGBAllRequest, opts ...grpc.CallOption) (*SetRGBAllReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRGBAllReply)
	err := c.cc.Invoke(ctx, KeyboardService_SetRGBAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) SetStatusLed(ctx context.Context, in *SetStatusLedRequest, opts ...grpc.CallOption) (*SetStatusLedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStatusLedReply)
	err := c.cc.Invoke(ctx, KeyboardService_SetStatusLed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) IncreaseBrightness(ctx context.Context, in *IncreaseBrightnessRequest, opts ...grpc.CallOption) (*BrightnessUpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrightnessUpdateReply)
	err := c.cc.Invoke(ctx, KeyboardService_IncreaseBrightness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyboardServiceClient) DecreaseBrightness(ctx context.Context, in *DecreaseBrightnessRequest, opts ...grpc.CallOption) (*BrightnessUpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrightnessUpdateReply)
	err := c.cc.Invoke(ctx, KeyboardService_DecreaseBrightness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyboardServiceServer is the server API for KeyboardService service.
// All implementations must embed UnimplementedKeyboardServiceServer
// for forward compatibility.
type KeyboardServiceServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusReply, error)
	// Returns a list of all detected keyboards.
	GetKeyboards(context.Context, *GetKeyboardsRequest) (*GetKeyboardsReply, error)
	// Connects to a keyboard using given an id retrieved from GetKeyboards.
	ConnectKeyboard(context.Context, *ConnectKeyboardRequest) (*ConnectKeyboardReply, error)
	// Connects to the first available keyboard.
	ConnectAnyKeyboard(context.Context, *ConnectAnyKeyboardRequest) (*ConnectKeyboardReply, error)
	// Disconnects to a keyboard using given an id retrieved from GetKeyboards.
	DisconnectKeyboard(context.Context, *DisconnectKeyboardRequest) (*DisconnectKeyboardReply, error)
	// Sets the active layer of a connected keyboard.
	SetLayer(context.Context, *SetLayerRequest) (*SetLayerReply, error)
	// Unsets a previously set layer.
	UnsetLayer(context.Context, *SetLayerRequest) (*SetLayerReply, error)
	// Sets the color of a specific LED on the keyboard.
	SetRGBLed(context.Context, *SetRGBLedRequest) (*SetRGBLedReply, error)
	// Sets the color of all LEDs on the keyboard.
	SetRGBAll(context.Context, *SetRGBAllRequest) (*SetRGBAllReply, error)
	// Sets the status LED on the keyboard.
	SetStatusLed(context.Context, *SetStatusLedRequest) (*SetStatusLedReply, error)
	// Increases the brightness of the keyboard.
	IncreaseBrightness(context.Context, *IncreaseBrightnessRequest) (*BrightnessUpdateReply, error)
	// Decreases the brightness of the keyboard.
	DecreaseBrightness(context.Context, *DecreaseBrightnessRequest) (*BrightnessUpdateReply, error)
	mustEmbedUnimplementedKeyboardServiceServer()
}

// UnimplementedKeyboardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyboardServiceServer struct{}

func (UnimplementedKeyboardServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedKeyboardServiceServer) GetKeyboards(context.Context, *GetKeyboardsRequest) (*GetKeyboardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyboards not implemented")
}
func (UnimplementedKeyboardServiceServer) ConnectKeyboard(context.Context, *ConnectKeyboardRequest) (*ConnectKeyboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectKeyboard not implemented")
}
func (UnimplementedKeyboardServiceServer) ConnectAnyKeyboard(context.Context, *ConnectAnyKeyboardRequest) (*ConnectKeyboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectAnyKeyboard not implemented")
}
func (UnimplementedKeyboardServiceServer) DisconnectKeyboard(context.Context, *DisconnectKeyboardRequest) (*DisconnectKeyboardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectKeyboard not implemented")
}
func (UnimplementedKeyboardServiceServer) SetLayer(context.Context, *SetLayerRequest) (*SetLayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLayer not implemented")
}
func (UnimplementedKeyboardServiceServer) UnsetLayer(context.Context, *SetLayerRequest) (*SetLayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetLayer not implemented")
}
func (UnimplementedKeyboardServiceServer) SetRGBLed(context.Context, *SetRGBLedRequest) (*SetRGBLedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRGBLed not implemented")
}
func (UnimplementedKeyboardServiceServer) SetRGBAll(context.Context, *SetRGBAllRequest) (*SetRGBAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRGBAll not implemented")
}
func (UnimplementedKeyboardServiceServer) SetStatusLed(context.Context, *SetStatusLedRequest) (*SetStatusLedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatusLed not implemented")
}
func (UnimplementedKeyboardServiceServer) IncreaseBrightness(context.Context, *IncreaseBrightnessRequest) (*BrightnessUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseBrightness not implemented")
}
func (UnimplementedKeyboardServiceServer) DecreaseBrightness(context.Context, *DecreaseBrightnessRequest) (*BrightnessUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseBrightness not implemented")
}
func (UnimplementedKeyboardServiceServer) mustEmbedUnimplementedKeyboardServiceServer() {}
func (UnimplementedKeyboardServiceServer) testEmbeddedByValue()                         {}

// UnsafeKeyboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyboardServiceServer will
// result in compilation errors.
type UnsafeKeyboardServiceServer interface {
	mustEmbedUnimplementedKeyboardServiceServer()
}

func RegisterKeyboardServiceServer(s grpc.ServiceRegistrar, srv KeyboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyboardService_ServiceDesc, srv)
}

func _KeyboardService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_GetKeyboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).GetKeyboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_GetKeyboards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).GetKeyboards(ctx, req.(*GetKeyboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_ConnectKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectKeyboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).ConnectKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_ConnectKeyboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).ConnectKeyboard(ctx, req.(*ConnectKeyboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_ConnectAnyKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAnyKeyboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).ConnectAnyKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_ConnectAnyKeyboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).ConnectAnyKeyboard(ctx, req.(*ConnectAnyKeyboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_DisconnectKeyboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectKeyboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).DisconnectKeyboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_DisconnectKeyboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).DisconnectKeyboard(ctx, req.(*DisconnectKeyboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_SetLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).SetLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_SetLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).SetLayer(ctx, req.(*SetLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_UnsetLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).UnsetLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_UnsetLayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).UnsetLayer(ctx, req.(*SetLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_SetRGBLed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRGBLedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).SetRGBLed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_SetRGBLed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).SetRGBLed(ctx, req.(*SetRGBLedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_SetRGBAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRGBAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).SetRGBAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_SetRGBAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).SetRGBAll(ctx, req.(*SetRGBAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_SetStatusLed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusLedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).SetStatusLed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_SetStatusLed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).SetStatusLed(ctx, req.(*SetStatusLedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_IncreaseBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseBrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).IncreaseBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_IncreaseBrightness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).IncreaseBrightness(ctx, req.(*IncreaseBrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyboardService_DecreaseBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseBrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyboardServiceServer).DecreaseBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyboardService_DecreaseBrightness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyboardServiceServer).DecreaseBrightness(ctx, req.(*DecreaseBrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyboardService_ServiceDesc is the grpc.ServiceDesc for KeyboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.KeyboardService",
	HandlerType: (*KeyboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _KeyboardService_GetStatus_Handler,
		},
		{
			MethodName: "GetKeyboards",
			Handler:    _KeyboardService_GetKeyboards_Handler,
		},
		{
			MethodName: "ConnectKeyboard",
			Handler:    _KeyboardService_ConnectKeyboard_Handler,
		},
		{
			MethodName: "ConnectAnyKeyboard",
			Handler:    _KeyboardService_ConnectAnyKeyboard_Handler,
		},
		{
			MethodName: "DisconnectKeyboard",
			Handler:    _KeyboardService_DisconnectKeyboard_Handler,
		},
		{
			MethodName: "SetLayer",
			Handler:    _KeyboardService_SetLayer_Handler,
		},
		{
			MethodName: "UnsetLayer",
			Handler:    _KeyboardService_UnsetLayer_Handler,
		},
		{
			MethodName: "SetRGBLed",
			Handler:    _KeyboardService_SetRGBLed_Handler,
		},
		{
			MethodName: "SetRGBAll",
			Handler:    _KeyboardService_SetRGBAll_Handler,
		},
		{
			MethodName: "SetStatusLed",
			Handler:    _KeyboardService_SetStatusLed_Handler,
		},
		{
			MethodName: "IncreaseBrightness",
			Handler:    _KeyboardService_IncreaseBrightness_Handler,
		},
		{
			MethodName: "DecreaseBrightness",
			Handler:    _KeyboardService_DecreaseBrightness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/keymapp.proto",
}
